name: Python Backend CI/CD - Enhanced

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install black flake8 pytest bandit

      - name: Run Black Formatter
        run: black --check backend/

      - name: Run Flake8 Linter
        run: flake8 backend/

      - name: Run Pytest Unit Tests
        run: pytest backend/tests/unit/ || true # Allow failure for now, adjust path as needed

      - name: Run Pytest Integration Tests
        run: pytest backend/tests/integration/ || true # Allow failure for now, adjust path as needed

      - name: Run Bandit SAST
        run: bandit -r backend/ -ll -f json -o bandit-report.json || true

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb stable main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Build Docker image for backend
        run: docker build -t flowlet-backend:$(git rev-parse --short HEAD) ./backend

      - name: Scan backend Docker image (Trivy)
        run: trivy image --exit-code 1 --severity HIGH,CRITICAL flowlet-backend:$(git rev-parse --short HEAD)

      - name: Run Secrets Scanning (TruffleHog - Placeholder)
        run: echo "TruffleHog scan placeholder: trufflehog filesystem . --json > trufflehog_report.json || true"

      - name: Run OWASP Dependency-Check (Placeholder)
        run: echo "OWASP Dependency-Check placeholder: Download and run dependency-check.sh"

  # Placeholder for deployment job, will be in a separate workflow or triggered by this one
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build-test-scan
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #   - name: Deploy to production
  #     run: echo "Deploying backend..."


