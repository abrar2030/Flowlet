apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: flowlet-tls-secrets
  namespace: flowlet-security
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-secret-store
    kind: SecretStore
  target:
    name: flowlet-tls-secrets
    creationPolicy: Owner
  data:
    - secretKey: tls.crt
      remoteRef:
        key: flowlet/tls
        property: tls.crt
    - secretKey: tls.key
      remoteRef:
        key: flowlet/tls
        property: tls.key
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: flowlet-api-keys
  namespace: flowlet-security
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-secret-store
    kind: SecretStore
  target:
    name: flowlet-api-keys
    creationPolicy: Owner
  data:
    - secretKey: stripe-api-key
      remoteRef:
        key: flowlet/api-keys
        property: stripe-api-key
    - secretKey: plaid-api-key
      remoteRef:
        key: flowlet/api-keys
        property: plaid-api-key
    - secretKey: marqeta-api-key
      remoteRef:
        key: flowlet/api-keys
        property: marqeta-api-key
    - secretKey: sendgrid-api-key
      remoteRef:
        key: flowlet/api-keys
        property: sendgrid-api-key
    - secretKey: twilio-api-key
      remoteRef:
        key: flowlet/api-keys
        property: twilio-api-key
    - secretKey: openai-api-key
      remoteRef:
        key: flowlet/api-keys
        property: openai-api-key
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: flowlet-oauth-secrets
  namespace: flowlet-security
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-secret-store
    kind: SecretStore
  target:
    name: flowlet-oauth-secrets
    creationPolicy: Owner
  data:
    - secretKey: google-client-secret
      remoteRef:
        key: flowlet/oauth-secrets
        property: google-client-secret
    - secretKey: github-client-secret
      remoteRef:
        key: flowlet/oauth-secrets
        property: github-client-secret
    - secretKey: microsoft-client-secret
      remoteRef:
        key: flowlet/oauth-secrets
        property: microsoft-client-secret
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-policies
  namespace: flowlet-security
data:
  password-policy.json: |
    {
      "minLength": 14,
      "requireUppercase": true,
      "requireLowercase": true,
      "requireNumbers": true,
      "requireSpecialChars": true,
      "maxAge": 60,
      "historyCount": 24,
      "lockoutThreshold": 3,
      "lockoutDuration": 1800,
      "disallowedCommonPasswords": true
    }
  
  rate-limiting.json: |
    {
      "global": {
        "requests": 5000,
        "window": 3600
      },
      "perUser": {
        "requests": 500,
        "window": 3600
      },
      "perIP": {
        "requests": 50,
        "window": 60
      },
      "endpoints": {
        "/auth/login": {
          "requests": 3,
          "window": 180,
          "burst": 1
        },
        "/auth/register": {
          "requests": 1,
          "window": 3600
        },
        "/payments/transfer": {
          "requests": 5,
          "window": 60,
          "burst": 2
        }
      }
    }
  
  encryption-config.json: |
    {
      "algorithms": {
        "symmetric": "AES-256-GCM",
        "asymmetric": "RSA-4096",
        "hashing": "SHA-512",
        "signing": "ECDSA-P384"
      },
      "keyRotation": {
        "interval": "30d",
        "gracePeriod": "7d",
        "autoRotate": true
      },
      "dataClassification": {
        "pii": {
          "encryption": "required",
          "tokenization": "required",
          "hsm": "required"
        },
        "financial": {
          "encryption": "required",
          "tokenization": "required",
          "hsm": "required"
        },
        "internal": {
          "encryption": "required"
        }
      },
      "auditLogging": {
        "enabled": true,
        "level": "full"
      }
    }
---
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: flowlet-mtls
  namespace: flowlet-core
spec:
  mtls:
    mode: STRICT
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: flowlet-authz
  namespace: flowlet-core
spec:
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/flowlet-core/sa/api-gateway"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
  - from:
    - source:
        namespaces: ["flowlet-monitoring"]
    to:
    - operation:
        methods: ["GET"]
        paths: ["/metrics", "/health"]
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-api-gateway-to-services
  namespace: flowlet-core
spec:
  podSelector:
    matchLabels:
      app: api-gateway
  policyTypes:
    - Egress
  egress:
    - to:
        - podSelector: {}
      ports:
        - protocol: TCP
          port: 8080 # Assuming services listen on 8080
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-all-ingress-except-api-gateway
  namespace: flowlet-core
spec:
  podSelector: {}
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: api-gateway
      ports:
        - protocol: TCP
          port: 8080
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-all-egress-except-dns-and-api-gateway
  namespace: flowlet-core
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              - 10.0.0.0/8 # Internal network range, adjust as needed
              - 172.16.0.0/12
              - 192.168.0.0/16
      ports:
        - protocol: UDP
          port: 53 # Allow DNS
    - to:
        - podSelector:
            matchLabels:
              app: api-gateway
      ports:
        - protocol: TCP
          port: 8080
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flowlet-security-auditor
rules:
- apiGroups: ["", "apps", "networking.k8s.io", "policy", "rbac.authorization.k8s.io", "external-secrets.io", "security.istio.io"]
  resources: ["pods", "deployments", "networkpolicies", "secrets", "configmaps", "roles", "rolebindings", "clusterroles", "clusterrolebindings", "externalsecrets", "peerauthentications", "authorizationpolicies"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: flowlet-security-auditor-binding
subjects:
- kind: Group
  name: security-auditors # Name of the group that will be bound to this role
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: flowlet-security-auditor
  apiGroup: rbac.authorization.k8s.io


