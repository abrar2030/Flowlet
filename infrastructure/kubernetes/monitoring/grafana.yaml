apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: flowlet-monitoring
data:
  grafana.ini: |
    [analytics]
    check_for_updates = false
    
    [grafana_net]
    url = https://grafana.net
    
    [log]
    mode = console
    level = info
    
    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    
    [server]
    root_url = %(protocol)s://%(domain)s:%(http_port)s/grafana/
    serve_from_sub_path = true
    
    [security]
    # Admin password should be managed via Kubernetes secrets or external secret management
    # admin_user = admin
    # admin_password = admin123
    allow_embedding = false
    cookie_samesite = lax
    
    [users]
    allow_sign_up = false
    allow_org_create = false
    
    [auth.anonymous]
    enabled = false
    
    [auth.basic]
    enabled = true

  datasources.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus.flowlet-monitoring.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
    - name: InfluxDB
      type: influxdb
      access: proxy
      url: http://influxdb.flowlet-data.svc.cluster.local:8086
      database: flowlet-metrics
      user: admin
      secureJsonFromExternalSecrets:
        password: flowlet-influxdb-password
      jsonData:
        timeInterval: "5s"
    - name: Loki
      type: loki
      access: proxy
      url: http://loki.flowlet-monitoring.svc.cluster.local:3100
      jsonData:
        timeInterval: "5s"

  dashboards.yml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards
    - name: 'kubernetes'
      orgId: 1
      folder: 'Kubernetes'
      type: file
      options:
        path: /var/lib/grafana/dashboards/kubernetes
    - name: 'security'
      orgId: 1
      folder: 'Security'
      type: file
      options:
        path: /var/lib/grafana/dashboards/security

  # Placeholder for flowlet-overview.json - actual content will be more detailed
  flowlet-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Flowlet Platform Overview (Enhanced)",
        "tags": ["flowlet", "overview", "financial"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Service Status",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job=~\"flowlet-.*\"}",
                "legendFormat": "{{kubernetes_name}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "green", "value": 1}
                  ]
                }
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "API Gateway Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(http_requests_total{job=\"flowlet-backend\", service=\"api-gateway\"}[5m]))",
                "legendFormat": "API Gateway"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Overall Response Time (95th Percentile)",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[5m])) by (le))",
                "legendFormat": "95th percentile"
              }
            ],
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Error Rate (5xx)",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(http_requests_total{status=~\"5..\"}[5m]))",
                "legendFormat": "Total 5xx Errors"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 16}
          },
          {
            "id": 5,
            "title": "Database Connections (PostgreSQL)",
            "type": "graph",
            "targets": [
              {
                "expr": "pg_stat_activity_count{datname=\"flowlet\"}",
                "legendFormat": "Active connections"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 16}
          },
          {
            "id": 6,
            "title": "Kubernetes Node CPU Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(node_cpu_seconds_total{mode=\"idle\"}) by (instance)",
                "legendFormat": "{{instance}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 24}
          },
          {
            "id": 7,
            "title": "Kubernetes Pod Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(container_memory_usage_bytes{namespace=\"flowlet-core\"}) by (pod)",
                "legendFormat": "{{pod}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 24}
          }
        ],
        "time": {
          "from": "now-6h",
          "to": "now"
        },
        "refresh": "10s"
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: flowlet-monitoring
spec:
  replicas: 2 # Increased replicas for high availability
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 472 # Grafana default user ID
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.1.0 # Use a specific, stable version
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: grafana-admin-credentials
              key: admin-user
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-admin-credentials
              key: admin-password
        - name: GF_SERVER_ROOT_URL
          value: "https://grafana.flowlet.com" # Example: Replace with actual external URL
        - name: GF_AUTH_GENERIC_OAUTH_ENABLED
          value: "true"
        - name: GF_AUTH_GENERIC_OAUTH_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: grafana-oauth-credentials
              key: client-id
        - name: GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: grafana-oauth-credentials
              key: client-secret
        - name: GF_AUTH_GENERIC_OAUTH_SCOPES
          value: "openid profile email"
        - name: GF_AUTH_GENERIC_OAUTH_AUTH_URL
          value: "https://your-idp.com/oauth2/authorize" # Replace with your IdP auth URL
        - name: GF_AUTH_GENERIC_OAUTH_TOKEN_URL
          value: "https://your-idp.com/oauth2/token" # Replace with your IdP token URL
        - name: GF_AUTH_GENERIC_OAUTH_API_URL
          value: "https://your-idp.com/oauth2/userinfo" # Replace with your IdP userinfo URL
        - name: GF_AUTH_GENERIC_OAUTH_ALLOWED_DOMAINS
          value: "your-company.com"
        - name: GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH
          value: "contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'"
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: grafana-config
          mountPath: /etc/grafana/provisioning/datasources/datasources.yml
          subPath: datasources.yml
        - name: grafana-config
          mountPath: /etc/grafana/provisioning/dashboards/dashboards.yml
          subPath: dashboards.yml
        - name: grafana-config
          mountPath: /var/lib/grafana/dashboards/flowlet-overview.json
          subPath: flowlet-overview.json
        - name: grafana-storage
          mountPath: /var/lib/grafana
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage-pvc
      serviceAccountName: grafana-serviceaccount
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: flowlet-monitoring
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: http
    name: http
  type: ClusterIP # Changed to ClusterIP, Ingress will handle external access
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage-pvc
  namespace: flowlet-monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi # Increased storage
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-serviceaccount
  namespace: flowlet-monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: grafana-reader
  namespace: flowlet-monitoring
rules:
- apiGroups: ["", "extensions", "apps"]
  resources: ["pods", "services", "endpoints", "ingresses", "deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["monitoring.coreos.com"]
  resources: ["servicemonitors", "podmonitors"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: grafana-reader-binding
  namespace: flowlet-monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: grafana-reader
subjects:
- kind: ServiceAccount
  name: grafana-serviceaccount
  namespace: flowlet-monitoring
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: flowlet-monitoring
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-passthrough: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /grafana/$1
    cert-manager.io/cluster-issuer: "letsencrypt-prod" # Assuming cert-manager is installed
spec:
  tls:
  - hosts:
    - grafana.flowlet.com # Replace with your actual Grafana domain
    secretName: grafana-tls-secret
  rules:
  - host: grafana.flowlet.com # Replace with your actual Grafana domain
    http:
      paths:
      - path: /grafana/(.*)
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000


